<?php
namespace Aws\Rekognition;

use Aws\AwsClient;
use Aws\Result;
use GuzzleHttp\Promise\Promise;

/**
 * This client is used to interact with the **Amazon Rekognition** service.
 * @method Result compareFaces(array $args = [])
 * @method Promise compareFacesAsync(array $args = [])
 * @method Result createCollection(array $args = [])
 * @method Promise createCollectionAsync(array $args = [])
 * @method Result createStreamProcessor(array $args = [])
 * @method Promise createStreamProcessorAsync(array $args = [])
 * @method Result deleteCollection(array $args = [])
 * @method Promise deleteCollectionAsync(array $args = [])
 * @method Result deleteFaces(array $args = [])
 * @method Promise deleteFacesAsync(array $args = [])
 * @method Result deleteStreamProcessor(array $args = [])
 * @method Promise deleteStreamProcessorAsync(array $args = [])
 * @method Result describeCollection(array $args = [])
 * @method Promise describeCollectionAsync(array $args = [])
 * @method Result describeStreamProcessor(array $args = [])
 * @method Promise describeStreamProcessorAsync(array $args = [])
 * @method Result detectFaces(array $args = [])
 * @method Promise detectFacesAsync(array $args = [])
 * @method Result detectLabels(array $args = [])
 * @method Promise detectLabelsAsync(array $args = [])
 * @method Result detectModerationLabels(array $args = [])
 * @method Promise detectModerationLabelsAsync(array $args = [])
 * @method Result detectText(array $args = [])
 * @method Promise detectTextAsync(array $args = [])
 * @method Result getCelebrityInfo(array $args = [])
 * @method Promise getCelebrityInfoAsync(array $args = [])
 * @method Result getCelebrityRecognition(array $args = [])
 * @method Promise getCelebrityRecognitionAsync(array $args = [])
 * @method Result getContentModeration(array $args = [])
 * @method Promise getContentModerationAsync(array $args = [])
 * @method Result getFaceDetection(array $args = [])
 * @method Promise getFaceDetectionAsync(array $args = [])
 * @method Result getFaceSearch(array $args = [])
 * @method Promise getFaceSearchAsync(array $args = [])
 * @method Result getLabelDetection(array $args = [])
 * @method Promise getLabelDetectionAsync(array $args = [])
 * @method Result getPersonTracking(array $args = [])
 * @method Promise getPersonTrackingAsync(array $args = [])
 * @method Result indexFaces(array $args = [])
 * @method Promise indexFacesAsync(array $args = [])
 * @method Result listCollections(array $args = [])
 * @method Promise listCollectionsAsync(array $args = [])
 * @method Result listFaces(array $args = [])
 * @method Promise listFacesAsync(array $args = [])
 * @method Result listStreamProcessors(array $args = [])
 * @method Promise listStreamProcessorsAsync(array $args = [])
 * @method Result recognizeCelebrities(array $args = [])
 * @method Promise recognizeCelebritiesAsync(array $args = [])
 * @method Result searchFaces(array $args = [])
 * @method Promise searchFacesAsync(array $args = [])
 * @method Result searchFacesByImage(array $args = [])
 * @method Promise searchFacesByImageAsync(array $args = [])
 * @method Result startCelebrityRecognition(array $args = [])
 * @method Promise startCelebrityRecognitionAsync(array $args = [])
 * @method Result startContentModeration(array $args = [])
 * @method Promise startContentModerationAsync(array $args = [])
 * @method Result startFaceDetection(array $args = [])
 * @method Promise startFaceDetectionAsync(array $args = [])
 * @method Result startFaceSearch(array $args = [])
 * @method Promise startFaceSearchAsync(array $args = [])
 * @method Result startLabelDetection(array $args = [])
 * @method Promise startLabelDetectionAsync(array $args = [])
 * @method Result startPersonTracking(array $args = [])
 * @method Promise startPersonTrackingAsync(array $args = [])
 * @method Result startStreamProcessor(array $args = [])
 * @method Promise startStreamProcessorAsync(array $args = [])
 * @method Result stopStreamProcessor(array $args = [])
 * @method Promise stopStreamProcessorAsync(array $args = [])
 */
class RekognitionClient extends AwsClient {}
